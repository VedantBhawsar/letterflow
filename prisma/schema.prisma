generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = "mongodb+srv://admin:admin@cluster0.d92qsmv.mongodb.net/myDatabase"
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String          @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  sessions      Session[]
  campaigns     Campaign[]
  subscribers   Subscriber[]
  templates     EmailTemplate[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Campaign {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  userId      String         @db.ObjectId
  name        String
  subject     String
  content     String
  status      String         @default("draft") // draft, scheduled, sent, archived
  sentAt      DateTime?
  scheduledAt DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  stats       CampaignStats?
  audiences   Subscriber[]   @relation(fields: [audienceIds], references: [id])
  audienceIds String[]       @db.ObjectId
}

model Subscriber {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  userId      String     @db.ObjectId
  email       String
  firstName   String?
  lastName    String?
  status      String     @default("active") // active, unsubscribed, bounced
  tags        String[]
  metadata    Json?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaigns   Campaign[] @relation(fields: [campaignIds], references: [id])
  campaignIds String[]   @db.ObjectId
}

model CampaignStats {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  campaignId   String   @unique @db.ObjectId
  sent         Int      @default(0)
  delivered    Int      @default(0)
  opened       Int      @default(0)
  clicked      Int      @default(0)
  unsubscribed Int      @default(0)
  bounced      Int      @default(0)
  complaints   Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  campaign     Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

model EmailTemplate {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  name      String
  content   String
  category  String? // newsletter, promotion, announcement, etc.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
